name: Google cloud shell

on:
  workflow_dispatch:

jobs:
  job_id:
    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash    
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: 'Use gcloud CLI'
      run: 'gcloud info'
    - name: 'INstall plugins for google cloud'
      run: 'gcloud components install gke-gcloud-auth-plugin'
      
    - name: 'create velero service account'
      run: |
        echo "-------Download and Install velero CLI if needed"
          if [ ! -f ~/gke-casa/velero ]; then
            wget https://github.com/vmware-tanzu/velero/releases/download/v1.10.2/velero-v1.10.2-linux-amd64.tar.gz
            tar -zxvf velero-v1.10.2-linux-amd64.tar.gz
          fi
    - name: 'Add velero to PATH'
      run: |
        mkdir -p ~/bin && cp velero-v1.10.2-linux-amd64/velero ~/bin && echo 'export PATH="$PATH:$HOME/bin"' >> ~/.bashrc && export PATH="$PATH:$HOME/bin"
        echo '${{secrets.GCP_CREDENTIALS}}' > credentials-velero
        ls
        gcloud container clusters get-credentials k8s-cluster --zone us-central1-a --project eco-tenure-393916
        velero install \
          --uploader-type restic \
          --use-volume-snapshots=false \
          --provider gcp \
          --plugins velero/velero-plugin-for-gcp:v1.6.0,velero/velero-plugin-for-csi:v0.4.2,velero/velero-plugin-for-microsoft-azure:v1.6.0 \
          --use-node-agent --features=enableCSI \
          --bucket 'shagok-velero-backup' \
          --secret-file ./credentials-velero
        cat << EOF > storage-class-Azure.yml
        apiVersion: storage.k8s.io/v1
        kind: StorageClass
        metadata:
          name: default
        provisioner: kubernetes.io/gce-pd
        parameters:
          type: pd-standard
        EOF
        set +e
        kubectl create -f storage-class-Azure.yml
        set -e
        kubectl wait pods --all --namespace=velero --for=condition=Ready --timeout=300s
        echo "Velero installation is completed. Proceeding with restoration."
        sleep 10
        # Output file to save timing information
        OUTPUT_FILE="timing_output.txt"


        print_timing() {
          local minutes=$(( $1 / 60 ))
          local seconds=$(( $1 % 60 ))
          printf "Loop %02d: %02d minutes %02d seconds\n" "$i" "$minutes" "$seconds" >> "$GITHUB_WORKSPACE/$OUTPUT_FILE"
        }

        # Loop 20 times
        for ((i = 1; i <= 1; i++)); do
          echo "Running loop $i"
          # Start timing
          start_time=$(date +%s)
          velero get backup-locations
          velero get backups
          velero restore create --include-namespaces wordpress --from-backup azure-restic-test
          sleep 2
          # Wait for all resources in the namespace to be ready
          time kubectl wait pods --all --namespace=wordpress --for=condition=Ready --timeout=300s 2>&1 | tee -a "$GITHUB_WORKSPACE/$OUTPUT_FILE"
          # Calculate duration
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          #clear the cluster for next iteration
          kubectl delete ns wordpress
          kubectl wait namespace wordpress --for=delete
          # Print total duration with iteration number
          print_timing "$duration"
          echo "Loop $i completed."
        done

                
    - name: Upload timing_output.txt as an artifact
      uses: actions/upload-artifact@v2
      with:
          name: timing_output
          path: timing_output.txt
