name: "Azure to GCP failover"

on:
  workflow_dispatch:

jobs:
  terraform:
    permissions:
      contents: 'read'
      id-token: 'write'  
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1


    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}  
        
    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: 'Use gcloud CLI'
      run: 'gcloud info'
    - name: 'INstall plugins for google cloud'
      run: 'gcloud components install gke-gcloud-auth-plugin'
      
    - name: 'create velero service account'
      run: |
        echo "-------Download and Install velero CLI if needed"
          if [ ! -f ~/gke-casa/velero ]; then
            wget https://github.com/vmware-tanzu/velero/releases/download/v1.10.2/velero-v1.10.2-linux-amd64.tar.gz
            tar -zxvf velero-v1.10.2-linux-amd64.tar.gz
          fi
    - name: 'Add velero to PATH'
      run: |
        mkdir -p ~/bin && cp velero-v1.10.2-linux-amd64/velero ~/bin && echo 'export PATH="$PATH:$HOME/bin"' >> ~/.bashrc && export PATH="$PATH:$HOME/bin"
        gcloud container clusters get-credentials k8s-cluster --zone us-central1-a --project eco-tenure-393916
        cat << EOF > ./credentials-velero
        AZURE_SUBSCRIPTION_ID=${{secrets.AZURE_SUBSCRIPTION_ID}}
        AZURE_TENANT_ID=${{secrets.AZURE_TENANT_ID}}
        AZURE_CLIENT_ID=${{secrets.AZURE_CLIENT_ID}}
        AZURE_CLIENT_SECRET=${{secrets.AZURE_CLIENT_SECRET}}
        AZURE_RESOURCE_GROUP=my-aks-cluster-rg
        AZURE_CLOUD_NAME=AzurePublicCloud
        EOF
        velero install \
          --uploader-type restic \
          --use-volume-snapshots=false \
          --provider azure \
          --plugins velero/velero-plugin-for-gcp:v1.6.0,velero/velero-plugin-for-csi:v0.4.2,velero/velero-plugin-for-microsoft-azure:v1.6.0 \
          --use-node-agent --features=enableCSI \
          --bucket 'velerobackup' \
          --backup-location-config resourceGroup=my-aks-cluster-rg,storageAccount=velerobackupshagok \
          --secret-file ./credentials-velero
        cat << EOF > storage-class-Azure.yml
        apiVersion: storage.k8s.io/v1
        kind: StorageClass
        metadata:
          name: default
        provisioner: kubernetes.io/gce-pd
        parameters:
          type: pd-standard
        EOF
        set +e
        kubectl create -f storage-class-Azure.yml
        set -e
        kubectl wait pods --all --namespace=velero --for=condition=Ready --timeout=300s
        echo "Velero installation is completed. Proceeding with restoration."
        sleep 10
        # Output file to save timing information
        OUTPUT_FILE="timing_output.txt"


        print_timing() {
          local minutes=$(( $1 / 60 ))
          local seconds=$(( $1 % 60 ))
          printf "Loop %02d: %02d minutes %02d seconds\n" "$i" "$minutes" "$seconds" >> "$GITHUB_WORKSPACE/$OUTPUT_FILE"
        }

        # Loop 20 times
        for ((i = 1; i <= 1; i++)); do
          echo "Running loop $i"
        # Start timing
        start_time=$(date +%s)
        velero get backup-locations
        velero restore create --include-namespaces wordpress --from-backup azure-backup
        sleep 6
        # Wait for all resources in the namespace to be ready
        time kubectl wait pods --all --namespace=wordpress --for=condition=Ready --timeout=300s 2>&1 | tee -a "$GITHUB_WORKSPACE/$OUTPUT_FILE"
        # Calculate duration
        end_time=$(date +%s)
        duration=$((end_time - start_time))
        #clear the cluster for next iteration
        #kubectl delete ns wordpress
        #kubectl wait namespace wordpress --for=delete
        # Print total duration with iteration number
        print_timing "$duration"
        #echo "Loop $i completed."
        done
    
    - name: Terraform Destroy
      run: terraform destroy -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
              
    - name: Upload timing_output.txt as an artifact
      uses: actions/upload-artifact@v2
      with:
        name: timing_output
        path: timing_output.txt
    - name: Trigger Next Iteration
      env:
        TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        REPO_OWNER: goksha
        REPO_NAME: test-gcloud-shell
        WORKFLOW_NAME: Azure_to_GCP_failover.yml
      run: |
         curl -X POST -H "Authorization: Bearer $TOKEN" \
         -H "Accept: application/vnd.github.v3+json" \
         https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/actions/workflows/$WORKFLOW_NAME/dispatches \
         -d '{"ref":"main"}'
